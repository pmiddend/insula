* Aktivitäten
** DONE Kamera
	 CLOSED: [2010-07-28 Wed 21:46]
*** DONE Winkel-Extraktion aus [[http://www.google.com/url?sa=t&source=web&cd=3&ved=0CCUQFjAC&url=http%3A%2F%2Fwww.gregslabaugh.name%2Fpublications%2Feuler.pdf&ei=5BNPTIbkB5rQ4wax7IiCCA&usg=AFQjCNGgP_-68fHn3TvPlqwAomC3TZV4fw][diesem]] Paper umsetzen (in fcppt-Funktion packen?)
		 CLOSED: [2010-07-28 Wed 18:53]
*** DONE 3-Vektor-Ansatz
		 CLOSED: [2010-07-28 Wed 21:46]
**** DONE 
		 CLOSED: [2010-07-28 Wed 19:24]

Definiere Right:=(1,0,0) und Forward:=(0,0,1). Finde heraus, ob 
Right x Forward = (0,1,0) ist. Ansonsten müssen alle Kreuzprodukte 
vertauscht werden. 

**** DONE Vorgehen
		 CLOSED: [2010-07-28 Wed 21:46]

Im Folgenden seien die Kreuzprodukte mit der _linken_ Hand auszuführen

1. Statt 3 Rotationswinkeln speichert man 3 Vektoren, Forward, Right, Up
2. Anfangs sind diese natürlich auf (0,0,1), (1,0,0) und (0,1,0) eingestellt
3. Bei mouse_x_axis will man um die y-Achse rotieren.
   1. Rotiere Forward um Up. Markiere alle Vektoren außer Forward 
      als ungültig (idealerweise wären Forward und Up noch orthogonal, kann man
      sich aber nicht drauf verlassen), kennzeichne mit *
   2. Right := Up* x Forward, Right steht orthogonal auf Forward und Up*
   3. Up := Forward x Right
4. Bei mouse_y_axis will man um die x-Achse rotieren.
	 1. Rotiere Forward um Right. Wieder alle Vektoren ungültig
	 2. Up := Forward x Right*
	 3. Right := Up x Forward
** TODO Skydome [1/3]
*** DONE Klassischer Ansatz
		 CLOSED: [2010-07-28 Wed 21:47]
**** DONE Vorgehen
		 CLOSED: [2010-07-28 Wed 21:47]

1. Erstelle Vertexbuffer für die _komplette_ Kugel

2. Zeichne diesen Vertexbuffer als Punktprimitiv

3. Schaue wie sich die Winkel auswirken, überlege wie man 
   die Winkel wählen müsste um einen Dome zu bekommen

4. Korrigiere eventuell den Fehler in der perspektivischen 
   oder der Modelviewmatrix

5. Erstelle korrekten Indexbuffer

6. Erstelle Shader, der Anhand der y-Koordinate die Farbe als 
   Gradient von hellblau zu blau wählt. Der Shader braucht 
   dafür vermutlich die maximal y-Koordinate.

*** TODO Icosphere-Ansatz
**** TODO Suche bei Google nach "icosphere triangle strip"
*** TODO Weiteres Vorgehen [5/6]
**** DONE render_height_map mit Kamera fixen
		 CLOSED: [2010-07-29 Thu 01:10]
**** DONE angle-Funktion in fcppt pushen (vorher test mit FCPPT_TEXT versehen)
		 CLOSED: [2010-07-28 Wed 23:40]
**** DONE Sonne einfügen
		 CLOSED: [2010-07-29 Thu 00:50]
**** TODO Maximalwinkel für den Skydome einstellen (nicht immer 90 Grad)
**** DONE Neues Programm render_scene machen und render_height_map aufsplitten
		 CLOSED: [2010-07-29 Thu 00:52]
**** DONE Skydome in render_scene einbauen
		 CLOSED: [2010-07-29 Thu 18:05]

** TODO Wasser [3/6]
*** DONE Variable =water_height= definieren, die per Kommandozeile einstellbar ist
		 CLOSED: [2010-07-30 Fri 00:02]
*** DONE Funktion einbauen, um die Kamera an der Wasser-Ebene zu spiegeln
		 CLOSED: [2010-07-30 Fri 00:02]
Dazu muss getan werden: 
#+BEGIN_SRC emacs-c++-mode
vec3 new_position = cam.position
new_position.y = -cam.position.y + 2*water_height
vec3 target = cam.position + cam.forward
target.y = -target.y + 2*water_height
vec3 forward = target - new_position
// Streng genommen müsste man hier noch forward und right
// orthogonalisieren, kann man sich aber vermutlich 
// sparen
cam.new_axes(forward,cam.right,forward x right);
#+END_SRC

Vorher sollte die aktuelle Kamera (bzw. das Achsentriplet) gespeichert
werden (oder so)
*** DONE Rendertarget
		 CLOSED: [2010-07-30 Fri 00:10]
Definiere (Konsolen-)Funktion, die die Kamera an der Wasser-Ebene
spiegelt, dann rendert und das gerenderte in einer Datei abspeichert,
die man sich dann angucken kann.

Platzhalter für Clippingplanes einbauen. Außerdem die Möglichkeit
offen lassen, das Wasser beim Rendern auszulassen. Am besten bekommt
die Funktion ein Rendercallback, wo man dann =skydome.render()= und
=height_map.render()= einbauen kann.
*** TODO Quad für Wasser einbauen (mit Wassertextur), rendern
*** TODO Wassershader
Dieser Shader sollte geladen werden, wenn das Wasserquad gerendert
wird. Er bekommt zwei World-Matrizen und eine Projektionsmatrix. Bei
der einen steht der Betrachter "normal", bei der anderen gespiegelt
unter der Wasseroberfläche (diese Spiegelungsmatrizen kann man aus dem
ersten Renderpass copypasten). Rausschreiben tut er einerseits
=gl_Position = projection * world * position=, damit das Wasserquad an
der richtigen Stelle gezeichnet wird. Andererseits leitet er
=out vec2 texcoord = vec2(projection * mirrored_world * position)=
weiter, die im Fragmentshader als Texturkoordinaten (für die
vorgerenderte Textur) gelten. Alternativ könnte man auch =out vec4
texcoord = projection * mirrored_world * position= versuchen
und dann im Fragmentshader: 
=vec2 texcoord_new = vec2(texcoord.x/texcoord.w,texcoord.y/texcoord.w)=
Der Kerl im Paper macht zusätzlich noch /2 +0.5, vermutlich aus
Normierungsgründen. Das vielleicht auch noch probieren.
*** TODO Clipping in den Shadern machen
** TODO Nebel

** TODO HDR-Faking für besseres Licht

** TODO Models (Bäume etc.)

** TODO Shadow MapsT


** TODO Physik, Fahrzeuge

** TODO Wie gehts weiter? Sounds?
** TODO Diverses [0/2]
*** TODO Framecounter einbauen
*** TODO gizmo_init fixen
*** TODO Average-Filter übers Terrain laufen lassen
